package main

import (
	"fmt"
)

// Что выведет код?
// Можно ли взять указатель от элемента в мапе и почему?
// https://tech-questions.notion.site/Order-of-elements-in-map-610ccffb0ed143929b421b4b7f16e6f8

type Good struct {
	Name  string `json:"name,omitempty"`
	Stock uint   `json:"stock"`
}

func itemsInStock() map[string]uint {
	return map[string]uint{
		"milk":   300014,
		"sugar":  108,
		"carrot": 3,
		"water":  778,
	}
}

func createGoods(itemsInStock map[string]uint) []Good {
	goods := make([]Good, 0, len(itemsInStock))
	for name, stock := range itemsInStock {
		goods = append(goods, Good{
			Name:  name,
			Stock: stock,
		})
	}
	return goods
}

func main() {
	inStock := itemsInStock()

	goods := createGoods(inStock)

	fmt.Println(goods)
}

// Пояснения.
// Указатель на элемент мапы.
// Нет, в Go нельзя взять указатель на элемент в карте (map). Это связано с тем, как устроены карты в языке Go.
//Причины:
//
//    Внутренняя реализация карты:
//        Карта в Go реализована как хеш-таблица, и элементы внутри карты могут
//       перемещаться в памяти при добавлении или удалении других элементов. Это делает небезопасным хранение указателей на элементы карты, так как они могут стать невалидными после таких операций.
//
//    Неопределённость местоположения в памяти:
//        Поскольку карта может перераспределять память для своих элементов,
//       место, где хранится конкретный элемент, может измениться. Если бы Go позволял брать указатели на элементы карты, то эти указатели могли бы указывать на неправильные места после изменения карты.
//
//    Семантика языка:
//        В Go карты разработаны так, чтобы скрывать от программиста внутреннюю реализацию и управление памятью. Это позволяет разработчикам фокусироваться на логике программы,
//       не беспокоясь о том, как и где в памяти хранятся элементы.
